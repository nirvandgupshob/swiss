// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  firstname     String?
  surname       String?
  email         String?  @unique
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  role          Role@default(PLAYER)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tournament {
  id            String   @id @default(cuid())
  name          String   @unique
  rounds        Int
  currentRound  Int      @default(0)
  startDate     DateTime
  status        String   @default("upcoming") // "upcoming", "active", "completed"
  players       Player[]
  pairings      Pairing[]
}

model Player {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  rating       Int
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  whiteGames   Pairing[] @relation("WhitePlayer")
  blackGames   Pairing[] @relation("BlackPlayer")
}

model Pairing {
  id           String    @id @default(cuid())
  roundNumber  Int
  result       String?   // "1-0", "0-1", "½-½", null
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  whiteId      String
  white        Player    @relation("WhitePlayer", fields: [whiteId], references: [id], onDelete: Cascade)
  blackId      String?
  black        Player?    @relation("BlackPlayer", fields: [blackId], references: [id], onDelete: Cascade)
}

enum Role {
  PLAYER
  JUDGE
}